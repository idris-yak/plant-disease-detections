# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CDetVHQ72yrhX9sKrcnN1TGmpbkhOojM
"""

import streamlit as st
from transformers import AutoImageProcessor, AutoModelForImageClassification
from PIL import Image
import torch
import pandas as pd

# Load model and processor
processor = AutoImageProcessor.from_pretrained("linkanjarad/mobilenet_v2_1.0_224-plant-disease-identification")
model = AutoModelForImageClassification.from_pretrained("linkanjarad/mobilenet_v2_1.0_224-plant-disease-identification")

# Load CSV with explanations
data = pd.read_csv("plant_disease_pidgin_filled_template.csv", encoding='latin1')

# Function to get Pidgin info
def get_pidgin_info(disease_class):
    row = data[data['Class Name'] == disease_class]
    if not row.empty:
        explanation = row.iloc[0]['Pidgin Explanation']
        solution = row.iloc[0]['Pidgin Solution']
        return explanation, solution
    else:
        return "No explanation found", "No solution found"

# Streamlit UI
st.title("üåø Plant Disease Detection App (with Pidgin Explanation)")

uploaded_file = st.file_uploader("üì§ Upload a plant leaf image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="Uploaded Image", use_column_width=True)

    # Process image
    inputs = processor(images=image, return_tensors="pt")

    # Predict
    with torch.no_grad():
        outputs = model(**inputs)
    predicted_class_idx = outputs.logits.argmax(-1).item()
    predicted_class = model.config.id2label[predicted_class_idx]

    # Get explanation & solution
    exp, sol = get_pidgin_info(predicted_class)

    # Display results
    st.success(f"‚úÖ **Prediction:** {predicted_class}")
    st.markdown(f"**üìù Explanation (Pidgin):** {exp}")
    st.markdown(f"**üß™ Solution (Pidgin):** {sol}")